% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pie.R
\name{pie-shiny}
\alias{pie-shiny}
\alias{pieOutput}
\alias{renderPie}
\title{Shiny bindings for pie}
\usage{
pieOutput(outputId, width = "100\%", height = "400px")

renderPie(expr, env = parent.frame(), quoted = FALSE)
}
\arguments{
\item{outputId}{output variable to read from}

\item{width, height}{Must be a valid CSS unit (like \code{'100\%'},
\code{'400px'}, \code{'auto'}) or a number, which will be coerced to a
string and have \code{'px'} appended.}

\item{expr}{An expression that generates a pie}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}
}
\description{
Output and render functions for using pie within Shiny
applications and interactive Rmd documents.
}
\examples{
## only run this in interactive R sessions
if(interactive()){
  ui <- fluidPage(
     titlePanel("Pie Example!"),
      sidebarLayout(
        sidebarPanel(
         sliderInput("obs",
                     "Generate n random Numbers",
                     min = 2,
                     max = 10,
                     value = 5),
                   ),
         mainPanel(
           pieOutput("piePlot"),
           textOutput("randNo")
    )
  )
)
server <- function(input, output) {
       numbers = reactive(round(runif(input$obs,1,10),0))
       output$piePlot <- renderPie({
                    pie(numbers())
                 })
       output$randNo <- renderText({
       numbers()
          })
    }
  shinyApp(ui = ui, server = server)
}
}
